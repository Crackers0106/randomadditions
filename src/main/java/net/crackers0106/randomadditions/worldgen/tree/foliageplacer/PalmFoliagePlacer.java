package net.crackers0106.randomadditions.worldgen.tree.foliageplacer;

import com.mojang.serialization.Codec;
import com.mojang.serialization.codecs.RecordCodecBuilder;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Vec3i;
import net.minecraft.util.valueproviders.IntProvider;
import net.minecraft.world.level.LevelSimulatedReader;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
import net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacerType;

import java.util.Random;
import java.util.function.BiConsumer;

// Shamelessly stolen from Barren Isles
public class PalmFoliagePlacer extends FoliagePlacer {
    // For the foliageHeight we use a codec generated by IntProvider.createValidatingCodec
    // As the method's arguments, we pass in the minimum and maximum value of the IntProvider
    // To add more fields into your TrunkPlacer/FoliagePlacer/TreeDecorator etc., use multiple .and calls
    //
    // For an example of creating your own type of codec, see the IntProvider.createValidatingCodec method's source
    public static final Codec<PalmFoliagePlacer> CODEC = RecordCodecBuilder.create(instance ->
            foliagePlacerParts(instance)
                    .and(IntProvider.codec(1, 512).fieldOf("foliage_height").forGetter(PalmFoliagePlacer::getFoliageHeight)).apply(instance, PalmFoliagePlacer::new));

    private final IntProvider foliageHeight;

    public PalmFoliagePlacer(IntProvider radius, IntProvider offset, IntProvider foliageHeight) {
        super(radius, offset);

        this.foliageHeight = foliageHeight;
    }

    public IntProvider getFoliageHeight() {
        return this.foliageHeight;
    }

    @Override
    protected FoliagePlacerType<?> type() {
        return RAFoliagePlacers.PALM_FOLIAGE_PLACER;
    }

    @Override
    protected void createFoliage(LevelSimulatedReader world, BiConsumer<BlockPos, BlockState> replacer, Random random, TreeConfiguration config, int trunkHeight, FoliageAttachment treeNode, int foliageHeight, int radius, int offset) {
        BlockPos.MutableBlockPos center = treeNode.pos().mutable();

        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, 0, 0))));

        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(1, 0, 0))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(1, -1, 0))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(2, -1, 0))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(2, -2, 0))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(1, 1, 0))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(2, 1, 0))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(3, 1, 0))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(3, 0, 0))));

        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(-1, 0, 0))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(-1, -1, 0))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(-2, -1, 0))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(-2, -2, 0))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(-1, 1, 0))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(-2, 1, 0))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(-3, 1, 0))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(-3, 0, 0))));

        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, 0, 1))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, -1, 1))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, -1, 2))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, -2, 2))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, 1, 1))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, 1, 2))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, 1, 3))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, 0, 3))));

        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, 0, -1))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, -1, -1))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, -1, -2))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, -2, -2))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, 1, -1))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, 1, -2))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, 1, -3))));
        tryPlaceLeaf(world, replacer, random, config, new BlockPos(center.offset(new Vec3i(0, 0, -3))));
    }

    @Override
    public int foliageHeight(Random random, int trunkHeight, TreeConfiguration config) {
        return this.foliageHeight.sample(random);
    }

    @Override
    protected boolean shouldSkipLocation(Random random, int dx, int y, int dz, int radius, boolean giantTrunk) {
        return false;
    }
}